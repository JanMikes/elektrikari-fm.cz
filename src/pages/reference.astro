---
import BaseLayout from '../layouts/BaseLayout.astro';
import SectionTitle from '../components/SectionTitle.astro';
import { references, categories } from '../data/references';
import { Image } from 'astro:assets';

// Import all reference images dynamically
const images = import.meta.glob<{ default: ImageMetadata }>('../images/*.jpg');

// Helper to get image for a filename
async function getImage(filename: string) {
  const path = `../images/${filename}`;
  const imageModule = images[path];
  if (!imageModule) {
    console.warn(`Image not found: ${path}`);
    return null;
  }
  return (await imageModule()).default;
}

// Preload first image of each reference for optimization
const referenceImages = await Promise.all(
  references.map(async (ref) => ({
    ...ref,
    firstImage: await getImage(ref.images[0])
  }))
);

// Note: Full-size images are kept in public/images/ for the lightbox
// Thumbnails are optimized using Astro's Image component
---

<BaseLayout
  title="Reference elektrikářů Frýdek-Místek | Realizované projekty elektro | Foto galerie"
  description="Prohlédněte si reference naší práce. Foto galerie realizovaných elektroinstalací, revizí a montáží hromosvodů. Elektrikáři z Frýdku-Místku s 500+ dokončenými projekty. Kvalita, kterou vidíte. Ostrava, Karviná, Opava."
  keywords="reference elektrikář Frýdek-Místek, realizace elektroinstalace, foto elektrikář, galerie elektro práce, dokončené projekty, reference elektro Ostrava"
>
  <section class="py-8 md:py-14">
    <div class="container-custom">
      <SectionTitle title="Naše reference" />

      <p class="text-lg text-gray-700 mb-8">
        Prohlédněte si naši galerii a přesvědčte se sami o kvalitě naší práce.
        Jsme hrdí na každou realizaci, která splnila očekávání našich zákazníků.
      </p>

      <!-- Category Filter -->
      <div class="flex flex-wrap gap-3 mb-12">
        {categories.map((category) => (
          <button
            class="filter-btn px-6 py-2 rounded-full font-medium transition-all duration-300 border-2"
            data-category={category}
          >
            {category}
          </button>
        ))}
      </div>

      <!-- Projects Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="projects-grid">
        {referenceImages.map((reference, index) => (
          <div
            class="project-card group cursor-pointer"
            data-category={reference.category}
            data-project-index={index}
          >
            <div class="relative overflow-hidden rounded-lg shadow-lg hover:shadow-2xl transition-all duration-500 bg-white">
              <!-- Main Image -->
              <div class="relative aspect-[4/3] overflow-hidden bg-gray-100">
                {reference.firstImage && (
                  <Image
                    src={reference.firstImage}
                    alt={reference.title}
                    width={400}
                    height={300}
                    format="webp"
                    quality={85}
                    class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                    loading="lazy"
                  />
                )}
                <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />

                <!-- Image Count Badge -->
                {reference.images.length > 1 && (
                  <div class="absolute top-4 right-4 bg-black/70 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    {reference.images.length}
                  </div>
                )}

                <!-- Zoom Icon -->
                <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <div class="bg-white/90 rounded-full p-4">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v6m3-3H7" />
                    </svg>
                  </div>
                </div>
              </div>

              <!-- Content -->
              <div class="p-5">
                <div class="flex items-start justify-between gap-3 mb-3">
                  <h3 class="text-lg font-bold text-gray-900 group-hover:text-primary-600 transition-colors duration-300 leading-tight">
                    {reference.title}
                  </h3>
                </div>

                {reference.description && (
                  <p class="text-gray-600 text-sm mb-3 line-clamp-2">
                    {reference.description}
                  </p>
                )}

                <div class="flex items-center justify-between">
                  <span class="inline-block px-3 py-1 bg-primary-50 text-primary-700 text-xs font-medium rounded-full">
                    {reference.category}
                  </span>
                  <span class="text-primary-600 text-sm font-medium group-hover:translate-x-1 transition-transform duration-300 inline-flex items-center gap-1">
                    Zobrazit
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Lightbox Modal -->
  <div id="lightbox-modal" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden flex items-center justify-center p-4">
    <button
      id="lightbox-close"
      class="absolute top-4 right-4 text-white hover:text-gray-300 transition-colors z-50"
      aria-label="Close"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>

    <button
      id="lightbox-prev"
      class="absolute left-4 text-white hover:text-gray-300 transition-colors z-50"
      aria-label="Previous"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>

    <button
      id="lightbox-next"
      class="absolute right-4 text-white hover:text-gray-300 transition-colors z-50"
      aria-label="Next"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <div class="max-w-7xl max-h-full flex flex-col items-center">
      <img
        id="lightbox-image"
        src=""
        alt=""
        class="max-w-full max-h-[80vh] object-contain rounded-lg"
      />
      <div id="lightbox-caption" class="text-white text-center mt-4 text-lg font-medium"></div>
    </div>
  </div>

  <script>
    import { references } from '../data/references';

    // Lightbox functionality
    let currentImages: string[] = [];
    let currentIndex = 0;
    let currentTitle = '';

    const modal = document.getElementById('lightbox-modal');
    const image = document.getElementById('lightbox-image') as HTMLImageElement;
    const caption = document.getElementById('lightbox-caption');
    const closeBtn = document.getElementById('lightbox-close');
    const prevBtn = document.getElementById('lightbox-prev');
    const nextBtn = document.getElementById('lightbox-next');

    function showImage(index: number) {
      if (index < 0) index = currentImages.length - 1;
      if (index >= currentImages.length) index = 0;

      currentIndex = index;
      image.src = `/images/${currentImages[index]}`;
      image.alt = `${currentTitle} - ${index + 1}`;
      if (caption) {
        caption.textContent = `${currentTitle} (${index + 1} / ${currentImages.length})`;
      }
    }

    function openLightbox(title: string, images: string[], startIndex: number) {
      currentTitle = title;
      currentImages = images;
      currentIndex = startIndex;
      showImage(currentIndex);
      modal?.classList.remove('hidden');
      modal?.classList.add('flex');
      document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
      modal?.classList.add('hidden');
      modal?.classList.remove('flex');
      document.body.style.overflow = '';
    }

    // Project card click handlers
    document.querySelectorAll('.project-card').forEach((card) => {
      card.addEventListener('click', () => {
        const projectIndex = parseInt((card as HTMLElement).dataset.projectIndex || '0');
        const project = references[projectIndex];
        if (project) {
          openLightbox(project.title, project.images, 0);
        }
      });
    });

    // Filter functionality
    const filterButtons = document.querySelectorAll('.filter-btn');
    const projectCards = document.querySelectorAll('.project-card');
    let activeCategory = 'Vše';

    function updateFilterButtons() {
      filterButtons.forEach((btn) => {
        const category = (btn as HTMLElement).dataset.category || '';
        if (category === activeCategory) {
          btn.classList.add('bg-primary-600', 'text-white', 'border-primary-600');
          btn.classList.remove('bg-white', 'text-gray-700', 'border-gray-300', 'hover:border-primary-400');
        } else {
          btn.classList.remove('bg-primary-600', 'text-white', 'border-primary-600');
          btn.classList.add('bg-white', 'text-gray-700', 'border-gray-300', 'hover:border-primary-400');
        }
      });
    }

    function filterProjects(category: string) {
      activeCategory = category;
      updateFilterButtons();

      projectCards.forEach((card) => {
        const projectCategory = (card as HTMLElement).dataset.category || '';
        if (category === 'Vše' || projectCategory === category) {
          card.classList.remove('hidden');
          setTimeout(() => {
            card.classList.add('animate-fade-in');
          }, 10);
        } else {
          card.classList.add('hidden');
          card.classList.remove('animate-fade-in');
        }
      });
    }

    // Initialize filters
    updateFilterButtons();

    filterButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        const category = (btn as HTMLElement).dataset.category || 'Vše';
        filterProjects(category);
      });
    });

    // Lightbox event listeners
    closeBtn?.addEventListener('click', closeLightbox);
    prevBtn?.addEventListener('click', () => showImage(currentIndex - 1));
    nextBtn?.addEventListener('click', () => showImage(currentIndex + 1));

    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeLightbox();
      }
    });

    document.addEventListener('keydown', (e) => {
      if (!modal?.classList.contains('hidden')) {
        if (e.key === 'Escape') closeLightbox();
        if (e.key === 'ArrowLeft') showImage(currentIndex - 1);
        if (e.key === 'ArrowRight') showImage(currentIndex + 1);
      }
    });
  </script>

  <style>
    @keyframes fade-in {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-fade-in {
      animation: fade-in 0.4s ease-out;
    }

    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
</BaseLayout>
